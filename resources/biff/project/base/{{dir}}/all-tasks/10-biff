#!/bin/bash
# Managed by Biff.

# Don't edit files/parts of files with ^this^ message. It means that Biff might
# update the file (e.g. when new versions come out), which would overwrite your
# changes. If you want Biff to stop managing files for you, remove the call to
# biff.project/update-{% if spa %}s{% else %}m{% endif %}pa-files in your app's main namespace.

# === DEV ===

build-css-dev () {
  mkdir -p www-dev/css/
  npx tailwindcss-cli build tailwind.css -o www-dev/css/main.css
}

ensure-module-installed () {
  module=$1
  if ! npm list $module > /dev/null; then
    npm install --save-dev $module
  fi
}

init () {
  if [ -f package.json ]; then
    npm install
  else
    npm init -y
    {% if spa %}npm install --save react react-dom
    npm install --save-dev shadow-cljs tailwindcss-cli onchange clean-css-cli
{% else %}npm install --save-dev tailwindcss-cli onchange clean-css-cli
{% endif %}  fi
  echo
  echo Initialization complete.
}

dev () {
  if ! [ -e node_modules ]; then
    init
  fi
  npx onchange -i tailwind.css -- ./task build-css-dev &
  trap 'kill $(jobs -p) 2> /dev/null' EXIT
  mopt="-A"
  if clj -Sdescribe | grep -q repl-aliases; then
    mopt="-M"
  fi
  BIFF_ENV=dev clj $mopt{% if spa %}:cljs{% endif %} "$@" -m $MAIN_NS
}


# === BUILD ===

current-image-id () {
  curl -X GET -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_API_KEY" \
              "https://api.digitalocean.com/v2/images?private=true" \
    | node -e "
    var stdin = process.stdin,
        inputChunks = [];
    stdin.resume();
    stdin.setEncoding('utf8');
    stdin.on('data', function (chunk) {
        inputChunks.push(chunk);
    });
    stdin.on('end', function () {
        var imageId = JSON.parse(inputChunks.join(''))
                          .images
                          .filter(x => x.name === 'biff-webserver')
                          .sort((x, y) => (x.created_at < y.created_at) ? 1 : -1)[0]
                          .id;
        console.log(imageId);
    });"
}

build-image () {
  if ! which packer > /dev/null; then
    echo You must install Packer before running this command. See https://learn.hashicorp.com/tutorials/packer/getting-started-install.
    exit 1
  fi
  cat > infra/provisioners/00-config << EOD
# Managed by Biff
MAIN_NS="$MAIN_NS"
AUTHORIZED_KEYS="$PUBLIC_KEY"
HOST="$HOST"
LETSENCRYPT_EMAIL="$LETSENCRYPT_EMAIL"
GIT_URL="$GIT_URL"
EOD
  export DIGITALOCEAN_API_KEY
  (cd infra; packer build webserver.json)
  perl -pi -e "s/.*IMAGE_ID.*/IMAGE_ID=\"$(current-image-id)\" # Managed by Biff/" config/task.env
}

build-css () {
  ensure-module-installed clean-css-cli
  out=resources/www/css/main.css
  min=resources/www/css/main.min.css
  NODE_ENV=production npx tailwindcss build tailwind.css -o $out
  npx cleancss -o $min $out
  mv $min $out
}

{% if spa %}build-cljs () {
  npx shadow-cljs release $CLJS_APPS
  for app in $CLJS_APPS; do
    mkdir -p resources/www/cljs/$app
    if [ -e www-dev/cljs/$app/main.js ]; then
      cp {www-dev,resources/www}/cljs/$app/main.js
    else
      # For backwards compatibility. See #64.
      cp {www,resources/www}/cljs/$app/main.js
    fi
  done
}

{% endif %}build-assets () {
  build-css
{% if spa %}  build-cljs
{% endif %}}


# === DEPLOY ===

generate-deploy-key () {
  echo When you\'re asked for a passphrase, leave it empty.
  echo
  ssh-keygen -t rsa -b 4096 -f config/deploy-key
  echo
  echo If you\'re using Github, enter the contents of config/deploy-key.pub
  echo at https://github.com/your_username/your_repo/settings/keys
}

tf () {
  if [ -z "$IMAGE_ID" ]; then
    echo You must run \`./task build-image\` before running this command.
    exit 1
  fi
  if ! which terraform > /dev/null; then
    echo You must install Terraform before running this command. See https://learn.hashicorp.com/tutorials/terraform/install-cli.
    exit 1
  fi
  if ! [ -e infra/.terraform ]; then
    echo 'Running `terraform init`. Sometimes this can take a few minutes (see https://github.com/hashicorp/terraform/issues/15798).'
    (cd infra; terraform init)
  fi
  export TF_VAR_digitalocean_api_key="${DIGITALOCEAN_API_KEY}"
  export TF_VAR_deploy_key="${DEPLOY_KEY}"
  export TF_VAR_image_id="${IMAGE_ID}"
  export TF_VAR_ssh_key_fingerprint="$(ssh-keygen -l -E md5 -f config/ssh-public-key | awk '{ print $2 }' | sed 's/^MD5://')"
  (cd infra; terraform "$@")
}

deploy () {
  echo Updating config...
  scp config/main.edn root@$HOST:/home/biff/config/main.edn
  echo Deploying app...
  ssh root@$HOST systemctl restart biff
  echo Watching logs. Hit Ctrl-C to exit.
  ssh root@$HOST journalctl -u biff -f
}


# === MONITOR ===

logs () {
  echo If you see \"No journal files were found.\", run \`ssh root@$HOST reboot\` to fix it.
  echo
  ssh root@$HOST journalctl -u biff -f -n 300
}

prod-connect () {
  echo Connect your repl to port 7800.
  ssh -NL 7800:localhost:7888 root@$HOST
}


# === OTHER ===

help () {
  cat <<EOD
DEVELOP

./task init

  Run this if you just created this project or if you just cloned this project
  on a new machine.

./task dev

  Starts your app locally. Also, changes to tailwind.css will be applied
  whenever you save the file.

BUILD

./task build-image

  *Note*: update the contents of config/ before running this command.

  Builds a VM image with Packer. Run this at least once before deploying.
  Use \`./task tf apply\` to deploy the new image.

./task build-assets

  Compiles your CSS {% if spa %}and ClojureScript {% endif %}for production. Run this before each
  deploy (unless you didn't change anything). For now, commit and push the
  output (I'll add CI support later).

DEPLOY

./task generate-deploy-key

  Generates an SSH private/public key pair which you can use to deploy your
  code from a private git repository. If you're deploying from a public repo,
  you can ignore this command.

./task tf [command]

  *Note*: update the contents of config/ before running this command.

  Runs \`terraform [command]\` with needed environment variables set. Use
  \`./task tf apply\` to deploy infrastructure changes. The first time you run
  this, it will also deploy your app. Use \`./task tf plan\` to do a dry run.

  If you've already created infrastructure before using Terraform, you may need
  to use \`./task tf import\`. See
  https://www.terraform.io/docs/import/usage.html. For example, if you've
  already imported the domain example.com into DigitalOcean, you'll need to run
  \`./task tf import digitalocean_domain.default example.com\` (see
  https://registry.terraform.io/providers/digitalocean/digitalocean/latest/docs/resources/domain#import).

./task deploy

  Restarts your app in production using the latest pushed commit. For the first
  deploy, use \`./task tf apply\`; for subsequent deploys, use this command.

MONITOR

./task logs

  Watches the production logs, starting with the last 300 lines. If you see
  "No journal files were found", you may need to reboot the server
  (\`ssh root@$HOST reboot\`). Don't ask me why that helps; I don't know.

./task prod-connect

  Starts an SSH tunnel. Connect nrepl to port 7800 to eval code in production.
  (Be careful).

---

Tip: put \`alias t=./task\` in your .bashrc file.

See https://findka.com/biff for more documentation. For additional help,
join #biff on Clojurians Slack (http://clojurians.net).
EOD
}

--help () {
  help
}

-h () {
  help
}
